{"ast":null,"code":"var _jsxFileName = \"/home/hridya/Downloads/react-app/src/components/UpdateName.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useTransition } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UpdateName() {\n  _s();\n  const [name, setName] = useState(\"\"); // State to store the input value\n  const [isPending, startTransition] = useTransition(); // Transition state to handle async operation\n\n  // Simulated async function to update the name\n  const updateName = async name => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (name === \"error\") {\n          reject(\"Error updating name\"); // Simulate an error\n        } else {\n          resolve(); // Simulate a successful update\n        }\n      }, 1000); // Simulate network delay\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmit = () => {\n    startTransition(async () => {\n      try {\n        await updateName(name); // Call updateName and wait for result\n        alert(\"Name updated successfully!\"); // Alert on successful update\n      } catch (error) {\n        alert(error); // Alert on error\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: name,\n      onChange: event => setName(event.target.value) // Update name state on input change\n      ,\n      placeholder: \"Enter your name\" // Placeholder text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      disabled: isPending,\n      children: [\" // Disable button if pending\", isPending ? 'Updating...' : 'Update', \" // Show 'Updating...' if pending\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(UpdateName, \"b/DVYh8ZF41OW51dtt2RwbMxs24=\", false, function () {\n  return [useTransition];\n});\n_c = UpdateName;\nexport default UpdateName;\nvar _c;\n$RefreshReg$(_c, \"UpdateName\");","map":{"version":3,"names":["React","useState","useTransition","jsxDEV","_jsxDEV","UpdateName","_s","name","setName","isPending","startTransition","updateName","Promise","resolve","reject","setTimeout","handleSubmit","alert","error","children","value","onChange","event","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/hridya/Downloads/react-app/src/components/UpdateName.js"],"sourcesContent":["import React, { useState, useTransition } from 'react';\n\nfunction UpdateName() {\n  const [name, setName] = useState(\"\"); // State to store the input value\n  const [isPending, startTransition] = useTransition(); // Transition state to handle async operation\n\n  // Simulated async function to update the name\n  const updateName = async (name) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (name === \"error\") {\n          reject(\"Error updating name\"); // Simulate an error\n        } else {\n          resolve(); // Simulate a successful update\n        }\n      }, 1000); // Simulate network delay\n    });\n  };\n\n  // Function to handle form submission\n  const handleSubmit = () => {\n    startTransition(async () => {\n      try {\n        await updateName(name); // Call updateName and wait for result\n        alert(\"Name updated successfully!\"); // Alert on successful update\n      } catch (error) {\n        alert(error); // Alert on error\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        value={name}\n        onChange={(event) => setName(event.target.value)} // Update name state on input change\n        placeholder=\"Enter your name\" // Placeholder text\n      />\n      <button onClick={handleSubmit} disabled={isPending}> // Disable button if pending\n        {isPending ? 'Updating...' : 'Update'} // Show 'Updating...' if pending\n      </button>\n    </div>\n  );\n}\n\nexport default UpdateName;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,SAAS,EAAEC,eAAe,CAAC,GAAGR,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMS,UAAU,GAAG,MAAOJ,IAAI,IAAK;IACjC,OAAO,IAAIK,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QACf,IAAIR,IAAI,KAAK,OAAO,EAAE;UACpBO,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACjC,CAAC,MAAM;UACLD,OAAO,CAAC,CAAC,CAAC,CAAC;QACb;MACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAAA,KAAM;IACzBN,eAAe,CAAC,YAAY;MAC1B,IAAI;QACF,MAAMC,UAAU,CAACJ,IAAI,CAAC,CAAC,CAAC;QACxBU,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdD,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBACEf,OAAA;MACEgB,KAAK,EAAEb,IAAK;MACZc,QAAQ,EAAGC,KAAK,IAAKd,OAAO,CAACc,KAAK,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;MAAA;MAClDI,WAAW,EAAC,iBAAiB,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,eACFxB,OAAA;MAAQyB,OAAO,EAAEb,YAAa;MAACc,QAAQ,EAAErB,SAAU;MAAAU,QAAA,GAAC,+BAClD,EAACV,SAAS,GAAG,aAAa,GAAG,QAAQ,EAAC,mCACxC;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACtB,EAAA,CAzCQD,UAAU;EAAA,QAEoBH,aAAa;AAAA;AAAA6B,EAAA,GAF3C1B,UAAU;AA2CnB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}