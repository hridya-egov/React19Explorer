{"ast":null,"code":"var _jsxFileName = \"/home/hridya/Downloads/react-app/src/components/FactorialCalculator.js\",\n  _s = $RefreshSig$();\n//usememo hook\nimport React, { useState, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FactorialCalculator() {\n  _s();\n  const [number, setNumber] = useState(0); //initial render calculationg factorial of 5\n\n  const factorial = useMemo(() => {\n    //if num doent change , the hook stores the last calculated result\n    console.log('Calculating factorial...');\n    const calculateFactorial = num => {\n      if (num <= 0) return 1;\n      return num * calculateFactorial(num - 1);\n    };\n    return calculateFactorial(number);\n  }, [number]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: number,\n      onChange: e => setNumber(Number(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Factorial of \", number, \" is \", factorial]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(FactorialCalculator, \"emu6zO5xbT5GBuqbp72XT/vKqhM=\");\n_c = FactorialCalculator;\nexport default FactorialCalculator;\n//without this hook calculatefactorial function wil recompute on every render. now it will store the value. it will only recompute when number changes.\nvar _c;\n$RefreshReg$(_c, \"FactorialCalculator\");","map":{"version":3,"names":["React","useState","useMemo","jsxDEV","_jsxDEV","FactorialCalculator","_s","number","setNumber","factorial","console","log","calculateFactorial","num","children","type","value","onChange","e","Number","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hridya/Downloads/react-app/src/components/FactorialCalculator.js"],"sourcesContent":["//usememo hook\nimport React, { useState, useMemo } from 'react';\n\nfunction FactorialCalculator() {\n  const [number, setNumber] = useState(0);//initial render calculationg factorial of 5\n\n  const factorial = useMemo(() => {//if num doent change , the hook stores the last calculated result\n    console.log('Calculating factorial...');\n    const calculateFactorial = (num) => {\n      if (num <= 0) return 1;\n      return num * calculateFactorial(num - 1);\n    };\n    return calculateFactorial(number);\n  }, [number]);\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        value={number}\n        onChange={(e) => setNumber(Number(e.target.value))}\n      />\n      <p>Factorial of {number} is {factorial}</p>\n    </div>\n  );\n}\n\nexport default FactorialCalculator;\n//without this hook calculatefactorial function wil recompute on every render. now it will store the value. it will only recompute when number changes."],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExC,MAAMQ,SAAS,GAAGP,OAAO,CAAC,MAAM;IAAC;IAC/BQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,MAAMC,kBAAkB,GAAIC,GAAG,IAAK;MAClC,IAAIA,GAAG,IAAI,CAAC,EAAE,OAAO,CAAC;MACtB,OAAOA,GAAG,GAAGD,kBAAkB,CAACC,GAAG,GAAG,CAAC,CAAC;IAC1C,CAAC;IACD,OAAOD,kBAAkB,CAACL,MAAM,CAAC;EACnC,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,oBACEH,OAAA;IAAAU,QAAA,gBACEV,OAAA;MACEW,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAET,MAAO;MACdU,QAAQ,EAAGC,CAAC,IAAKV,SAAS,CAACW,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eACFpB,OAAA;MAAAU,QAAA,GAAG,eAAa,EAACP,MAAM,EAAC,MAAI,EAACE,SAAS;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAAClB,EAAA,CAtBQD,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AAwB5B,eAAeA,mBAAmB;AAClC;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}